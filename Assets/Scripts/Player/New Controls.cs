//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace HamsterVsDinosaurs
{
    public partial class @NewControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NewControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""NewActionMap"",
            ""id"": ""07f10f68-95f9-4fed-8bc4-de23f222ac02"",
            ""actions"": [
                {
                    ""name"": ""MovementUp"",
                    ""type"": ""Value"",
                    ""id"": ""def3a17f-449a-4e29-8361-3b54e55322d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementRight"",
                    ""type"": ""Value"",
                    ""id"": ""868623b9-d6bb-494f-b1cc-3cc2be00ddcc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c46cb694-4fd3-4ca1-9804-08bf8e751788"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01790db3-5c88-4840-9878-04e70a062126"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""77247f60-bc83-412b-9f73-27296ae91ae5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8aff2deb-7992-407c-80e9-3684299a02e7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6e81ca9e-2f01-41d8-84e0-1da0fc9aa62c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""df5bb06c-2243-45c8-91d0-c0a970448647"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // NewActionMap
            m_NewActionMap = asset.FindActionMap("NewActionMap", throwIfNotFound: true);
            m_NewActionMap_MovementUp = m_NewActionMap.FindAction("MovementUp", throwIfNotFound: true);
            m_NewActionMap_MovementRight = m_NewActionMap.FindAction("MovementRight", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // NewActionMap
        private readonly InputActionMap m_NewActionMap;
        private List<INewActionMapActions> m_NewActionMapActionsCallbackInterfaces = new List<INewActionMapActions>();
        private readonly InputAction m_NewActionMap_MovementUp;
        private readonly InputAction m_NewActionMap_MovementRight;
        public struct NewActionMapActions
        {
            private @NewControls m_Wrapper;
            public NewActionMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MovementUp => m_Wrapper.m_NewActionMap_MovementUp;
            public InputAction @MovementRight => m_Wrapper.m_NewActionMap_MovementRight;
            public InputActionMap Get() { return m_Wrapper.m_NewActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NewActionMapActions set) { return set.Get(); }
            public void AddCallbacks(INewActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_NewActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NewActionMapActionsCallbackInterfaces.Add(instance);
                @MovementUp.started += instance.OnMovementUp;
                @MovementUp.performed += instance.OnMovementUp;
                @MovementUp.canceled += instance.OnMovementUp;
                @MovementRight.started += instance.OnMovementRight;
                @MovementRight.performed += instance.OnMovementRight;
                @MovementRight.canceled += instance.OnMovementRight;
            }

            private void UnregisterCallbacks(INewActionMapActions instance)
            {
                @MovementUp.started -= instance.OnMovementUp;
                @MovementUp.performed -= instance.OnMovementUp;
                @MovementUp.canceled -= instance.OnMovementUp;
                @MovementRight.started -= instance.OnMovementRight;
                @MovementRight.performed -= instance.OnMovementRight;
                @MovementRight.canceled -= instance.OnMovementRight;
            }

            public void RemoveCallbacks(INewActionMapActions instance)
            {
                if (m_Wrapper.m_NewActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INewActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_NewActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NewActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NewActionMapActions @NewActionMap => new NewActionMapActions(this);
        public interface INewActionMapActions
        {
            void OnMovementUp(InputAction.CallbackContext context);
            void OnMovementRight(InputAction.CallbackContext context);
        }
    }
}
